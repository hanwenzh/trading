using Model.Common;
using Model.Enum;
using Model.DB;
using MySQLSrv.Helper;
using System;
using System.Collections.Generic;
using System.Data;

namespace MySQLSrv
{
    public class AccountDA
    {
        public static List<Account> List()
        {
            string sql = "SELECT * FROM account";
            DataTable dt = MySQLHelper.GetDataTable(sql, null);
            List<Account> accounts = DAHelper.GetListByDataTable<Account>(dt);
            return accounts;
        }

        public static List<Base> List4Filter()
        {
            string sql = "SELECT id, `code`,`name` FROM account";
            DataTable dt = MySQLHelper.GetDataTable(sql, null);
            List<Base> accounts = DAHelper.GetListByDataTable<Base>(dt);
            return accounts;
        }

        public static ApiResultEnum Add(Account model, ref int id, string _operator)
        {
            string sql = "SELECT `code` FROM account WHERE `code` = @code";
            object obj = MySQLHelper.ExecuteScalar(sql, DAHelper.CreateParams(sql, model));
            if (obj != null)
            {
                return ApiResultEnum.Code_Exist;
            }

            sql = "INSERT INTO account(server_ip, server_port, `code`, `name`, full_name, remarks, limit_no_buying, ratio_commission, limit_ratio_single, limit_ratio_gem_single, limit_ratio_gem_total, ratio_capital_warning, capital_initial, capital_inferior, capital_priority, capital_raobiao, capital_raobiao_rate) VALUES(@server_ip, @server_port, @code, @name, @full_name, @remarks, @limit_no_buying, @ratio_commission, @limit_ratio_single, @limit_ratio_gem_single, @limit_ratio_gem_total, @ratio_capital_warning, @capital_initial, @capital_inferior, @capital_priority, @capital_raobiao, @capital_raobiao_rate); SELECT LAST_INSERT_ID()";
            obj = MySQLHelper.ExecuteScalar(sql, DAHelper.CreateParams(sql, model));
            if (obj != null)
            {
                id = int.Parse(obj.ToString());
                LogActionDA.Add(_operator, string.Format("创建主账户{0}({1})", id, model.code));
                return ApiResultEnum.Success;
            }
            else
                return ApiResultEnum.Failed;
        }

        public static ApiResultEnum Update(Account model)
        {
            string sql = "SELECT `code` FROM account WHERE id <> @id AND `code` = @code";
            object obj = MySQLHelper.ExecuteScalar(sql, DAHelper.CreateParams(sql, model));
            if (obj != null)
            {
                return ApiResultEnum.Code_Exist;
            }

            sql = "UPDATE account SET server_ip=@server_ip, server_port=@server_port, `code`=@code, `name`=@name, full_name=@full_name, remarks=@remarks, limit_no_buying=@limit_no_buying, ratio_commission=@ratio_commission, limit_ratio_single=@limit_ratio_single, limit_ratio_gem_single=@limit_ratio_gem_single, limit_ratio_gem_total=@limit_ratio_gem_total, ratio_capital_warning=@ratio_capital_warning, capital_initial=@capital_initial, capital_inferior=@capital_inferior, capital_priority=@capital_priority, capital_raobiao=@capital_raobiao, capital_raobiao_rate=@capital_raobiao_rate WHERE id =@id";
            if (MySQLHelper.ExecuteNonQuery(sql, DAHelper.CreateParams(sql, model)) > 0)
                return ApiResultEnum.Success;
            return ApiResultEnum.Failed;
        }

        public static ApiResultEnum UpdateStatus(Status model)
        {
            string sql = "UPDATE account SET `status`=@status WHERE id=@id";
            if (MySQLHelper.ExecuteNonQuery(sql, DAHelper.CreateParams(sql, model)) > 0)
                return ApiResultEnum.Success;
            return ApiResultEnum.Failed;
        }

        public static ApiResultEnum UpdateStatusTrade(StatusTrade model)
        {
            string sql = "UPDATE account SET status_trade=@status WHERE id=@id";
            if (MySQLHelper.ExecuteNonQuery(sql, DAHelper.CreateParams(sql, model)) > 0)
                return ApiResultEnum.Success;
            return ApiResultEnum.Failed;
        }

        public static ApiResultEnum Delete(Account model, string _operator)
        {
            string sql = "DELETE FROM account WHERE id=@id";
            if (MySQLHelper.ExecuteNonQuery(sql, DAHelper.CreateParams(sql, model)) > 0)
            {
                LogActionDA.Add(_operator, string.Format("删除主账户{0}({1})", model.id, model.code));
                return ApiResultEnum.Success;
            }
            return ApiResultEnum.Failed;
        }
    }
}