using Model.Return;
using MySQLSrv;
using Trade.Interface;
using System;
using System.Collections.Generic;
using System.ServiceModel.Activation;
using Model.Search;
using Model.DB;
using Model.Enum;
using Trade.Biz;
using Model.Common;
using Model.API;
using Common;
using RedisSrv;
using HQ;
using System.Linq;

namespace Trade.Service
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class Trade : Service, ITrade
    {
        public ResultLogCapital ListLogCapital(SearchCapitalLog model)
        {
            List<LogCapital> lst = LogCapitalDA.List(model);
            return new ResultLogCapital(lst);
        }

        public ResultOrder ListOrder(SearchUnit model)
        {
            IEnumerable<Order> lst = new List<Order>();
            if (model.from_dt.Date < DateTime.Now.Date)
                lst = lst.Union(OrderDA.List(model));
            if (model.from_dt.Date <= DateTime.Now.Date && model.to_dt.Date >= DateTime.Now.Date)
                lst = lst.Union(OrderRA.List4Unit(model.unit_id));
            return new ResultOrder(lst.OrderBy(o => o.time_dt).ToList());
        }

        public ResultOrder ListOrderCancellable(int unit_id)
        {
            List<Order> list = OrderRA.List4Unit(unit_id);
            list = list.Where(o => o.deal_count * o.cancel_count < o.count).ToList();
            return new ResultOrder(list);
        }

        public ResultDeal ListDeal(SearchUnit model)
        {
            IEnumerable<Deal> lst = new List<Deal>();
            if (model.from_dt.Date < DateTime.Now.Date)
                lst = lst.Union(DealDA.List(model));
            if (model.from_dt.Date <= DateTime.Now.Date && model.to_dt.Date >= DateTime.Now.Date)
                lst = lst.Union(DealRA.List4Unit(model.unit_id));
            return new ResultDeal(lst.OrderBy(o => o.time_dt).ToList());
        }

        public ResultPosition ListPosition(int unit_id)
        {
            List<Position> list = PositionRA.List4Unit(unit_id);
            return new ResultPosition(list);
        }

        public ResultUnitCapital GetUnitCapital(int unit_id)
        {
            Model.DB.Unit unit = UnitRA.Get("U_" + unit_id);
            UnitCapital unitCapital = new UnitCapital()
            {
                available = unit.capital_available,
                scale = unit.capital_scale,
                balance = unit.capital_balance,
                value = unit.capital_stock_value,
                assets = unit.capital_total,
                profit = unit.capital_profit
            };
            return new ResultUnitCapital(unitCapital);
        }

        public Result Order(Order model)
        {
            ApiResultEnum result = TradeBiz.CheckStatus(user_id, model.code, model.price, model.count);
            if (result != ApiResultEnum.Success)
                return Result(result);
            result = TradeBiz.CheckUnit(model);
            if (result != ApiResultEnum.Success)
                return Result(result);

            model.user_id = int.Parse(user_id);
            model.platform = int.Parse(platform);
            Dictionary<int, int> order_items = TradeBiz.GetOrderAccount(model);
            int order_count = 0;
            foreach (var kvp in order_items)
            {
                if (kvp.Value == 0)
                    continue;

                model.account_id = kvp.Key;
                model.count = kvp.Value;
                result = TradeBiz.CheckAccount(model);
                if (result != ApiResultEnum.Success)
                    return Result(result);
                Order(model);
                order_count += kvp.Value;
            }
            if (order_count == 0)
                return Result(model.type_enum == OrderTypeEnum.Buy ? ApiResultEnum.Order_Account_Negative_Amount : ApiResultEnum.Order_Account_Negative_Position);
            if (order_count < model.count)
                return Result(ApiResultEnum.Success_Portion);
            return Result(ApiResultEnum.Success);
        }

        public Result OrderLimit(Order model)
        {
            if (model.account_id == 0)
                return Result(ApiResultEnum.InvalidRequest);

            ApiResultEnum result = TradeBiz.CheckStatus(user_id, model.code, model.price, model.count);
            if (result != ApiResultEnum.Success)
                return Result(result);
            result = TradeBiz.CheckUnit(model);
            if (result != ApiResultEnum.Success)
                return Result(result);
            result = TradeBiz.CheckAccount(model);
            if (result != ApiResultEnum.Success)
                return Result(result);

            model.user_id = int.Parse(user_id);
            model.platform = int.Parse(platform);
            TradeBiz.Order(model);
            return Result(ApiResultEnum.Success);
        }

        public Result Cancel(Cancel model)
        {
            model.items.ForEach(item =>
            {
                TradeBiz.Cancel(item);
            });
            return Result(ApiResultEnum.Success);
        }

        public ResultLong OrderAutoAdd(OrderAutoAdd model)
        {
            ApiResultEnum result = TradeBiz.CheckStatus(user_id, model.code, model.price_min, model.count_total);
            if (result != ApiResultEnum.Success)
                return Result(result, 0);
            HQItem hq = HQService.Get(model.code);
            result = TradeBiz.CheckUnit(new Order()
            {
                unit_id = model.unit_id,
                code = model.code,
                price = hq.Last,
                count = model.count_total,
                type = model.type
            });
            if (result != ApiResultEnum.Success)
                return Result(result, 0);

            model.id = FuncHelper.GetUniqueID();
            model.user_id = int.Parse(user_id);
            model.platform = int.Parse(platform);
            if (model.account_id > 0)
            {
                string key_account = "A_" + model.account_id;
                Model.DB.Account account = AccountRA.Get(key_account);
                model.account_name = account.name;
            }
            else
                model.account_name = "";
            string key = "S_" + model.id + "_U_" + model.unit_id + "_D_0";
            OrderAutoRA.Add(model, key);
            return Result(ApiResultEnum.Success, model.id);
        }

        public Result OrderAutoUpdate(OrderAutoUpdate model)
        {
            bool result = OrderAutoRA.Update(model);
            return Result(result ? ApiResultEnum.Success : ApiResultEnum.Failed);
        }

        public ResultOrderAuto ListOrderAuto(int unit_id)
        {
            List<OrderAuto> orderAutos = OrderAutoRA.List4Unit(unit_id);
            return new ResultOrderAuto(orderAutos);
        }

        public Result OrderAutoDelete(OrderAutoUpdate model)
        {
            bool result = OrderAutoRA.Delete(model);
            return Result(result ? ApiResultEnum.Success : ApiResultEnum.Failed) ;
        }

        public Result OrderAutoUpdateStatus(Status model)
        {
            bool result = OrderAutoRA.UpdateStatus(model, user_id);
            return Result(result ? ApiResultEnum.Success : ApiResultEnum.Failed);
        }
    }
}