using Model.Return;
using Model.Enum;
using MySQLSrv;
using Trade.Interface;
using System;
using System.Collections.Generic;
using System.ServiceModel.Activation;
using Model.Common;
using RedisSrv;
using Trade.Biz;
using Base = Model.Common.Base;

namespace Trade.Service
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class Unit : Service, IUnit
    {
        public Result<List<Model.DB.Unit>> List()
        {
            UserRoleEnum role = (UserRoleEnum)int.Parse(UserRA.Get(user_id.ToString(), "role"));
            List<Model.DB.Unit> lst = UnitDA.List(role == UserRoleEnum.Administrator ? 0 : user_id);
            return Result(lst);
        }

        public Result<List<Base>> List4Filter()
        {
            UserRoleEnum role = (UserRoleEnum)int.Parse(UserRA.Get(user_id.ToString(), "role"));
            List<Base> lst = UnitDA.List4Filter(role == UserRoleEnum.Administrator ? 0 : user_id);
            return Result(lst);
        }

        public Result<List<Base>> List4Undirected()
        {
            UserRoleEnum role = (UserRoleEnum)int.Parse(UserRA.Get(user_id.ToString(), "role"));
            List<Model.Common.Base> lst = UnitDA.List4Undirected(role == UserRoleEnum.Administrator ? 0 : user_id);
            return Result(lst);
        }

        public Result<List<Base>> List4User(int _user_id)
        {
            List<Base> lst = UnitDA.List4User(_user_id > 0 ? _user_id : user_id);
            return Result(lst);
        }

        public Result<List<Base>> List4Account(int account_id)
        {
            List<Base> lst = UnitDA.List4Account(account_id);
            return Result(lst);
        }

        public Result<int> Add(Model.DB.Unit model)
        {
            int id = 0;
            model.created_by = user_id;
            model.status_order_enum = StatusOrderEnum.Allowed;
            ApiResultEnum result = UnitDA.Add(model, ref id);
            if (result == ApiResultEnum.Success && MonitorRA.GetStatusTrade() != 0)
            {
                model.id = id;
                OpenCloseBiz.LoadUnit(model);
            }
            return Result(result, id);
        }

        public Result Update(Model.DB.Unit model)
        {
            ApiResultEnum result = UnitDA.Update(model);
            if (result == ApiResultEnum.Success && MonitorRA.GetStatusTrade() != 0)
                OpenCloseBiz.LoadUnit(model, false);
            return Result(result);
        }

        public Result UpdateStatus(Status model)
        {
            ApiResultEnum result = UnitDA.UpdateStatus(model);
            if (result == ApiResultEnum.Success && MonitorRA.GetStatusTrade() != 0)
                UnitRA.UpdateStatus(model.status, "U_" + model.id);
            return Result(result);
        }

        public Result UpdateRatioFreezing(Model.DB.Unit model)
        {
            ApiResultEnum result = UnitDA.UpdateRatioFreezing(model);
            if (result == ApiResultEnum.Success && MonitorRA.GetStatusTrade() != 0)
                UnitRA.UpdateRatioFreezing(model.ratio_freezing, "U_" + model.id);
            return Result(result);
        }

        public Result CapitalInOut(Model.DB.LogCapital model)
        {
            model.@operator = user_id;
            decimal delta;
            ApiResultEnum result = LogCapitalDA.Add(model, out delta);
            if (result == ApiResultEnum.Success && MonitorRA.GetStatusTrade() != 0)
            {
                UnitRA.UpdateCapitalInOut(delta, "U_" + model.unit_id);
            }
            return Result(result);
        }

        public Result Delete(Model.DB.Unit model)
        {
            return Result(UnitDA.Delete(model, user_id));
        }
    }
}
