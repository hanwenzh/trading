using Model.Return;
using MySQLSrv;
using Trade.Interface;
using System;
using System.Collections.Generic;
using System.ServiceModel.Activation;
using Model.Search;
using Model.DB;
using Model.Enum;
using Trade.Biz;
using Model.Common;
using System.Linq;
using Model.API;
using Common;
using RedisSrv;
using HQ;

namespace Trade.Service
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class Trade : Service, ITrade
    {
        public ResultLogCapital ListLogCapital(SearchCapitalLog model)
        {
            List<Model.DB.LogCapital> lst = LogCapitalDA.List(model);
            return new ResultLogCapital(lst);
        }

        public ResultOrder ListOrder(SearchUnit model)
        {
            List<Model.DB.Order> lst = OrderDA.List(model);
            return new ResultOrder(lst);
        }

        public ResultOrder ListOrderCancellable(int unit_id)
        {
            //查询可撤订单，成交数量+撤销数量<委托数量
            return new ResultOrder(new List<Model.DB.Order>());
        }

        public ResultDeal ListDeal(SearchUnit model)
        {
            List<Model.DB.Deal> lst = DealDA.List(model);
            return new ResultDeal(lst);
        }

        public ResultPosition ListPosition(int unit_id)
        {
            List<Model.DB.Position> lst = new List<Model.DB.Position>();
            lst.Add(new Model.DB.Position()
            {
                code = "000001",
                name = "平安银行",
                count = 1000,
                count_sellable = 1000,
                price_cost = 12,
                account_name = "平安0036普通",
                unit_name = "823",
                price_latest = 12.50m
            });
            return new ResultPosition(lst);
        }

        public ResultUnitCapital GetUnitCapital(int unit_id)
        {
            UnitCapital unitCapital = new UnitCapital()
            {
                available = 1000000,
                scale = 1000000,
                balance = 1000000,
                value = 0,
                assets = 1000000,
                profit = 0
            };
            return new ResultUnitCapital(unitCapital);
        }

        public Result Order(Order model)
        {
            ApiResultEnum result = TradeBiz.CheckOrderStatus(user_id, model.code);
            if (result != ApiResultEnum.Success)
                return Result(result);
            result = TradeBiz.CheckOrder(model.unit_id, model.code, model.price, model.count, model.type_enum);
            if (result != ApiResultEnum.Success)
                return Result(result);

            model.user_id = int.Parse(user_id);
            model.platform = int.Parse(platform);
            TradeBiz.Order(model);
            return Result(ApiResultEnum.Success);
        }

        public Result OrderLimit(Order model)
        {
            if (model.account_id == 0)
                return Result(ApiResultEnum.InvalidRequest);

            ApiResultEnum result = TradeBiz.CheckOrderStatus(user_id, model.code);
            if (result != ApiResultEnum.Success)
                return Result(result);
            result = TradeBiz.CheckOrder(model.unit_id, model.account_id, model.code, model.price, model.count, model.type_enum);
            if (result != ApiResultEnum.Success)
                return Result(result);

            model.user_id = int.Parse(user_id);
            model.platform = int.Parse(platform);
            TradeBiz.Order(model);
            return Result(ApiResultEnum.Success);
        }

        public Result Cancel(Cancel model)
        {
            model.items.ForEach(item =>
            {
                TradeBiz.Cancel(item);
            });
            return Result(ApiResultEnum.Success);
        }

        public ResultLong OrderAutoAdd(OrderAutoAdd model)
        {
            ApiResultEnum result = TradeBiz.CheckOrderStatus(user_id, model.code);
            if (result != ApiResultEnum.Success)
                return Result(result, 0);
            HQItem hq = HQService.Get(model.code);
            if (model.account_id == 0)
                result = TradeBiz.CheckOrder(model.unit_id, model.code, hq.Last, model.count_total, model.type_enum);
            else
                result = TradeBiz.CheckOrder(model.unit_id, model.account_id, model.code, hq.Last, model.count_total, model.type_enum);
            if (result != ApiResultEnum.Success)
                return Result(result, 0);

            model.id = FuncHelper.GetUniqueID();
            if (model.account_id > 0)
            {
                string key_account = "A_" + model.account_id;
                Model.DB.Account account = AccountRA.Get(key_account);
                model.account_name = account.name;
            }
            else
                model.account_name = "";
            string key = "S_" + model.id + "_U_" + model.unit_id + "_D_0";
            OrderAutoRA.Add(model, key);
            return Result(ApiResultEnum.Success, model.id);
        }

        public Result OrderAutoUpdate(OrderAutoUpdate model)
        {
            bool result = OrderAutoRA.Update(model);
            return Result(result ? ApiResultEnum.Success : ApiResultEnum.Failed);
        }

        public ResultOrderAuto ListOrderAuto(int unit_id)
        {
            List<OrderAuto> orderAutos = new List<OrderAuto>();
            return new ResultOrderAuto(orderAutos);
        }

        public Result OrderAutoDelete(OrderAutoUpdate model)
        {
            bool result = OrderAutoRA.Delete(model);
            return Result(result ? ApiResultEnum.Success : ApiResultEnum.Failed) ;
        }

        public Result OrderAutoUpdateStatus(Status model)
        {
            bool result = OrderAutoRA.UpdateStatus(model);
            return Result(result ? ApiResultEnum.Success : ApiResultEnum.Failed);
        }
    }
}