using Common;
using HQ;
using Model.API;
using Model.DB;
using Model.Enum;
using Model.Return;
using RedisSrv;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;

namespace Trade.Biz
{
    public class TradeBiz
    {
        private static Dictionary<int, JYBiz> jybizs = new Dictionary<int, JYBiz>();
        private static bool run = false;

        public static void Start()
        {
            if (!run)
            {
                run = true;
                Thread thread = new Thread(Run);
                thread.IsBackground = true;
                thread.Start();
            }
        }

        public static void Stop()
        {
            run = false;
            foreach (var kvp in TradeBiz.jybizs)
            {
                kvp.Value.Dispose();
            }
        }

        public static void LoadAccount(Account account)
        {
            if (!jybizs.ContainsKey(account.id))
            {
                jybizs.Add(account.id, new JYBiz(account.id, account.server_ip, account.server_port));
            }
            else
            {
                jybizs[account.id].Dispose();
                jybizs[account.id] = new JYBiz(account.id, account.server_ip, account.server_port);
            }
        }

        private static void Run()
        {
            int counter = 0;
            while (run)
            {
                RunOrderAuto();
                counter++;
                if (counter > 2)
                {
                    RunCalculateValue();
                    counter = 0;
                }
                Thread.Sleep(1000);
            }
        }

        public static void RunOrderAuto()
        {
            List<OrderAuto> orders = OrderAutoRA.List4Undone();
            foreach (OrderAuto orderAuto in orders)
            {
                if (orderAuto.status_enum == StatusEnum.Forbidden)
                    continue;
                if (orderAuto.time_next_dt > DateTime.Now)
                    continue;
                Random random = new Random();

                Order order = new Order()
                {
                    code = orderAuto.code,
                    type = orderAuto.type,
                    unit_id = orderAuto.unit_id,
                    account_id = orderAuto.account_id,
                    user_id = orderAuto.user_id,
                    platform = orderAuto.platform
                };
                order.count = orderAuto.count_total - orderAuto.order_count;
                orderAuto.time_next_dt = DateTime.MinValue;
                if (order.count > orderAuto.count_max)
                {
                    order.count = random.Next(orderAuto.count_min / 100, orderAuto.count_max / 100) * 100;
                    orderAuto.time_next_dt = DateTime.Now.AddSeconds(random.Next(orderAuto.time_min, orderAuto.time_max));
                }
                order.price = DataBiz.GetPriceByPriceType(orderAuto.code, orderAuto.price_type_enum);
                if (order.price < orderAuto.price_min)
                    order.price = orderAuto.price_min;
                else if (order.price > orderAuto.price_max)
                    order.price = orderAuto.price_max;

                ApiResultEnum result = Order(order);

                orderAuto.result_prev = new Base(result).Message;
                orderAuto.order_times++;
                orderAuto.order_count += order.count;
                orderAuto.time_prev_dt = DateTime.Now;
                OrderAutoRA.UpdateExecuted(orderAuto, "S_" + orderAuto.id + "_U_" + orderAuto.unit_id + "_D_0");
            }
        }

        public static void RunCalculateValue()
        {
            //单元的市值
            Dictionary<int, decimal[]> dic_unit = new Dictionary<int, decimal[]>();
            //单元下的持仓代码
            Dictionary<int, List<string>> dic_unit_code_count = new Dictionary<int, List<string>>();
            //主账户的市值
            Dictionary<int, decimal> dic_account = new Dictionary<int, decimal>();
            //单元下主账户组中的主账户市值
            Dictionary<string, decimal> dic_account_group = new Dictionary<string, decimal>();
            string[] keys = TradeRA.KeySearch("P_*");
            foreach (string key in keys)
            {
                Position position = PositionRA.Get(key);
                HQItem hq = HQService.Get(position.code);
                decimal price = hq == null ? position.price_latest : hq.Last;
                decimal value = price * position.count;
                decimal profit = (price - position.price_cost) * position.count;
                if (dic_unit.ContainsKey(position.unit_id))
                {
                    dic_unit[position.unit_id][position.block] += value;
                    dic_unit[position.unit_id][4] += value;
                    dic_unit[position.unit_id][5] += profit;
                }
                else
                {
                    decimal[] values = new decimal[6] { 0, 0, 0, 0, value, profit };
                    values[position.block] = value;
                    dic_unit.Add(position.unit_id, values);
                }

                if (position.count > 0)
                {
                    if (dic_unit_code_count.ContainsKey(position.unit_id))
                    {
                        if (!dic_unit_code_count[position.unit_id].Contains(position.code))
                            dic_unit_code_count[position.unit_id].Add(position.code);
                    }
                    else
                        dic_unit_code_count.Add(position.unit_id, new List<string> { position.code });
                }

                //主账户市值暂只计算创业板
                if (position.block_enum == BlockEnum.gem)
                {
                    if (dic_account.ContainsKey(position.account_id))
                    {
                        dic_account[position.account_id] += value;
                    }
                    else
                    {
                        dic_account.Add(position.account_id, value);
                    }
                }

                string au = "A_" + position.account_id + "_U_" + position.unit_id;
                if (dic_account_group.ContainsKey(au))
                {
                    dic_account_group[au] += value;
                }
                else
                {
                    dic_account_group.Add(au, value);
                }
            }
            foreach (var kvp in dic_unit)
            {
                int stock_count = dic_unit_code_count.ContainsKey(kvp.Key) ? dic_unit_code_count[kvp.Key].Count : 0;
                UnitRA.UpdateCapitalStockValue(kvp.Value, stock_count, "U_" + kvp.Key);
            }
            foreach (var kvp in dic_account)
            {
                AccountRA.UpdateCapitalStockValue(kvp.Value, "A_" + kvp.Key);
            }
            foreach (var kvp in dic_account_group)
            {
                AccountGroupRA.UpdateCapitalStockValue(kvp.Key, kvp.Value);
            }
        }

        public static ApiResultEnum Order(Order order)
        {
            ApiResultEnum result = LimitBiz.CheckStatus(order);
            if (result != ApiResultEnum.Success)
                return result;
            result = LimitBiz.CheckUnit(order);
            if (result != ApiResultEnum.Success)
                return result;

            Dictionary<int, int> order_items;
            if (order.account_id == 0)
                order_items = LimitBiz.GetOrderAccount(order);
            else
                order_items = new Dictionary<int, int>() { { order.account_id, order.count } };

            int order_count = 0;
            order.trade_no = FuncHelper.GetUniqueID().ToString();
            order.trade_count = order.count;
            foreach (var kvp in order_items)
            {
                if (kvp.Value == 0)
                    continue;

                order.account_id = kvp.Key;
                order.count = kvp.Value;
                result = LimitBiz.CheckAccount(order);
                if (result != ApiResultEnum.Success)
                    continue;

                BlockInfo block = StockInfoBiz.GetBlock(order.code);
                order.price = Math.Round(order.price, block.@decimal);
                jybizs[order.account_id].Order(order);
                order_count += order.count;
            }

            if (order_count == 0)
                return result;
            if (order_count < order.count)
                return ApiResultEnum.Success_Portion;
            return ApiResultEnum.Success;
        }

        public static List<JY.PositionItem> QueryPosition(int account_id)
        {
             return jybizs[account_id].QueryPosition();
        }

        public static void Cancel(int account_id, string order_no)
        {
            jybizs[account_id].Cancel(order_no);
        }

        public static void NewDeal(Deal deal, decimal order_price, int type = 0)
        {
            //计算手续费，佣金最少收5元
            string key_unit = "U_" + deal.unit_id;
            Unit unit = UnitRA.Get(key_unit);
            deal.commission = Math.Max(Math.Round(deal.money * unit.ratio_commission, 2), 5);
            deal.management_fee = Math.Round(deal.money * unit.ratio_management_fee, 2);

            //卖单计算盈亏
            Position position = PositionRA.Get("P_" + deal.code + "_A_" + deal.account_id + "_U_" + deal.unit_id);
            if (deal.type == 1 && position != null)
                deal.profit = Math.Round((deal.price - position.price_cost) * deal.count, 2);

            //更新手续费和盈亏
            DealRA.UpdateFee(deal, "D_" + deal.deal_no + "_O_" + deal.order_no + "_U_" + deal.unit_id);

            AdjustPosition(position, deal, order_price, type);
        }

        public static void AdjustPosition(Position position, Deal deal, decimal order_price, int type)
        {
            string key_unit = "U_" + deal.unit_id;
            string key_position = "P_" + deal.code + "_A_" + deal.account_id + "_U_" + deal.unit_id;

            //更新单元余额和冻结
            if (deal.type_enum == OrderTypeEnum.Buy)
                UnitRA.UpdateCapitalDealBuy(order_price * deal.count, type == 0, key_unit);
            else if (deal.type_enum == OrderTypeEnum.Sell)
                UnitRA.UpdateCapitalDealSell(deal.price * deal.count, key_unit);

            //更新持仓
            decimal amount = deal.money + deal.commission;
            if (position != null)
            {
                if (deal.type == 0)
                {
                    position.price_cost = Math.Round((position.price_cost * position.count + amount) / (deal.count + position.count), 6);
                    position.count = position.count + deal.count;
                    if (type == 0 || type == 1)
                    {
                        position.price_cost_today_buy = Math.Round((amount + position.price_cost_today_buy * position.count_today_buy) / (deal.count + position.count_today_buy), 6);
                        position.count_today_buy = deal.count + position.count_today_buy;
                    }
                    PositionRA.UpdateBuy(position, key_position);
                }
                else
                {
                    position.price_cost = Math.Round((position.price_cost * position.count - amount) / (position.count - deal.count), 6);
                    position.count = position.count - deal.count;
                    position.count_sellable = position.count_sellable - deal.count;
                    if (type == 0 || type == 1)
                    {
                        position.price_cost_today_sell = Math.Round((amount + position.price_cost_today_sell * position.count_today_sell) / (deal.count + position.count_today_sell), 6);
                        position.count_today_sell = deal.count + position.count_today_sell;
                    }
                    PositionRA.UpdateSell(position, key_position);
                }
            }
            else
            {
                BlockInfo block = StockInfoBiz.GetBlock(deal.code);
                if (block == null)
                    return;

                position = new Position()
                {
                    code = deal.code,
                    name = deal.name,
                    unit_id = deal.unit_id,
                    account_id = deal.account_id,
                    block_enum = block.block_type_enum
                };
                if (deal.type == 0)
                {
                    position.price_cost = Math.Round(amount / deal.count, 6);
                    position.count = deal.count;
                    if (type == 0 || type == 1)
                    {
                        position.price_cost_today_buy = position.price_cost;
                        position.count_today_buy = position.count;
                    }
                    else if(type == 2)
                    {
                        position.count_sellable = position.count;
                    }
                }
                else
                {
                    position.price_cost = Math.Round(amount / deal.count, 6);
                    position.count = position.count_sellable = -deal.count;
                    if (type == 0 || type == 1)
                    {
                        position.price_cost_today_sell = position.price_cost;
                        position.count_today_sell = deal.count;
                    }
                }
                PositionRA.Add(position, key_position);
            }
            RunCalculateValue();
        }
    }
}