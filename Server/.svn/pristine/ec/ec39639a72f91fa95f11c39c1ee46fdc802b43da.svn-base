using System;
using System.Collections.Generic;
using Model.API;
using Model.Common;
using Model.DB;

namespace RedisSrv
{
    public class OrderAutoRA
    {
        public static void Add(OrderAutoAdd order, string key)
        {
            Dictionary<string, string> items = new Dictionary<string, string>();
            items.Add("id", order.id.ToString());
            items.Add("unit_id", order.unit_id.ToString());
            items.Add("account_id", order.account_id.ToString());
            items.Add("account_name", order.account_name);
            items.Add("code", order.code);
            items.Add("status", "0");
            items.Add("type", order.type.ToString());
            items.Add("price_min", order.price_min.ToString());
            items.Add("price_max", order.price_max.ToString());
            items.Add("price_type", order.price_type.ToString());
            items.Add("count_min", order.count_min.ToString());
            items.Add("count_max", order.count_max.ToString());
            items.Add("count_total", order.count_total.ToString());
            items.Add("time_min", order.time_min.ToString());
            items.Add("time_max", order.time_max.ToString());
            items.Add("time_next_dt", "");
            items.Add("time_prev_dt", "");
            items.Add("order_times", "0");
            items.Add("order_count", "0");
            items.Add("result_prev", "");
            items.Add("operator_start", "");
            TradeRA.SetFields(key, items);
            TradeRA.SetExpire(key);
        }

        public static bool Update(OrderAutoUpdate order)
        {
            string[] keys = TradeRA.KeySearch("S_" + order.id + "_*");
            if (keys.Length > 0)
            {
                Dictionary<string, string> items = new Dictionary<string, string>();
                items.Add("price_min", order.price_min.ToString());
                items.Add("price_max", order.price_max.ToString());
                items.Add("price_type", order.price_type.ToString());
                items.Add("count_min", order.count_min.ToString());
                items.Add("count_max", order.count_max.ToString());
                items.Add("count_total", order.count_total.ToString());
                items.Add("time_min", order.time_min.ToString());
                items.Add("time_max", order.time_max.ToString());
                TradeRA.SetFields(keys[0], items);
                return true;
            }
            return false;
        }

        public static bool UpdateStatus(Status model)
        {
            string[] keys = TradeRA.KeySearch("S_" + model.id + "_*");
            if (keys.Length > 0)
            {
                return TradeRA.Set(keys[0], "status", ((int)model.status).ToString());
            }
            return false;
        }

        public static bool Delete(OrderAutoUpdate model)
        {
            string[] keys = TradeRA.KeySearch("S_" + model.id + "_U_" + model.unit_id + "_*");
            if (keys.Length > 0)
            {
                return TradeRA.Delete(keys[0]);
            }
            return false;
        }
    }
}