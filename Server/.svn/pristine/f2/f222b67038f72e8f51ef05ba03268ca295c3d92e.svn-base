using Model.API;
using Model.Common;
using Model.Enum;
using Model.MySQL;
using MySQLSrv;
using Trade.Interface;
using RedisSrv;
using System;
using System.Collections.Generic;
using System.ServiceModel.Activation;

namespace Trade.Service
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class User : Service, IUser
    {
        public Result List()
        {
            List<Model.MySQL.User> lst = UserDA.List();
            return Result(ApiResultEnum.Success, lst);
        }

        public Result Add(Model.MySQL.User model)
        {
            int id = 0;
            ApiResultEnum result = UserDA.Add(model, ref id, user_id);
            return Result(result, id);
        }

        public Result Update(Model.MySQL.User model)
        {
            return Result(UserDA.Update(model));
        }

        public Result Authority(Model.MySQL.User model)
        {
            return Result(UserDA.Authority(model));
        }

        public Result UpdatePassword(UserPassword model)
        {
            model.id = user_id;
            return Result(UserDA.UpdatePassword(model));
        }

        public Result RestPassword(UserPassword model)
        {
            return Result(UserDA.RestPassword(model));
        }

        public Result UpdateStatus(Status model)
        {
            if (model.status == StatusEnum.Forbidden)
                UserRA.Delete(model.id.ToString());
            return Result(UserDA.UpdateStatus(model));
        }

        public Result UpdateStatusTrade(StatusTrade model)
        {
            UserRA.Set(model.id.ToString(), "status_trade", ((int)model.status).ToString());
            return Result(UserDA.UpdateStatusTrade(model));
        }

        public Result UpdateUnits(UserUnits model)
        {
            return Result(UnitDA.UpdateUserID(model));
        }

        public Result Delete(Model.MySQL.User model)
        {
            return Result(UserDA.Delete(model, user_id));
        }

        public Result Logout()
        {
            UserRA.Delete(user_id, platform);
            return Result(ApiResultEnum.Success);
        }
    }
}
