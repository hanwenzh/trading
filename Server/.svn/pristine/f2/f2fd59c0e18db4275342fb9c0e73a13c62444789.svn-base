using Model.API;
using Model.Enum;
using Model.MySQL;
using MySQLSrv;
using RapidTrade.Interface;
using RedisSrv;
using System;
using System.Collections.Generic;
using System.ServiceModel;
using System.ServiceModel.Activation;
using System.ServiceModel.Web;

namespace RapidTrade.Service
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class User : IUser
    {
        public Result List()
        {
            List<Model.MySQL.User> lst = UserDA.List();
            return Result(ApiResultEnum.Success, lst);
        }

        public Result Add(Model.MySQL.User model)
        {
            int id = 0;
            string _operator = OperationContext.Current.IncomingMessageHeaders.Action;
            ApiResultEnum result = UserDA.Add(model, ref id, _operator);
            return Result(result, id);
        }

        public Result Update(Model.MySQL.User model)
        {
            return Result(UserDA.Update(model));
        }

        public Result Authority(Model.MySQL.User model)
        {
            return Result(UserDA.Authority(model));
        }

        public Result UpdatePassword(UserPassword model)
        {
            return Result(UserDA.UpdatePassword(model));
        }

        public Result RestPassword(UserPassword model)
        {
            return Result(UserDA.RestPassword(model));
        }

        public Result UpdateStatus(UserStatus model)
        {
            return Result(UserDA.UpdateStatus(model));
        }

        public Result UpdateStatusBuying(UserStatus model)
        {
            return Result(UserDA.UpdateStatusBuying(model));
        }

        public Result Delete(Model.MySQL.User model)
        {
            string _operator = OperationContext.Current.IncomingMessageHeaders.Action;
            return Result(UserDA.Delete(model, _operator));
        }

        public Result Logout()
        {
            string platform = WebOperationContext.Current.IncomingRequest.Headers["platform"];
            string token = WebOperationContext.Current.IncomingRequest.Headers["token"];
            AuthorityRA.Delete(token, platform);
            return Result(ApiResultEnum.Success);
        }

        private Result Result(ApiResultEnum code, object data = null)
        {
            return new Result(code, data);
        }
    }
}
