using Model.Return;
using Model.Enum;
using MySQLSrv;
using Trade.Interface;
using System;
using System.Collections.Generic;
using System.ServiceModel.Activation;
using RedisSrv;
using Trade.Biz;

namespace Trade.Service
{
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Allowed)]
    public class AccountGroup : Service, IAccountGroup
    {
        public ResultAccountGroup List()
        {
            List<Model.DB.AccountGroup> lst = AccountGroupDA.List();
            return new ResultAccountGroup(lst);
        }

        public ResultLong Add(Model.DB.AccountGroup model)
        {
            int id = 0;
            ApiResultEnum result = AccountGroupDA.Add(model, ref id, user_id);
            return Result(result, id);
        }

        public Result Update(Model.DB.AccountGroup model)
        {
            return Result(AccountGroupDA.Update(model));
        }

        public Result UpdateItems(Model.DB.AccountGroup model)
        {
            ApiResultEnum result = AccountGroupDA.UpdateItems(model);
            if (result == ApiResultEnum.Success && TradeRA.GetInt("status_trade") != 0)
            {
                List<int> unit_ids = UnitDA.GetIDByAccountGroupID(model.id);
                unit_ids.ForEach(unit_id =>
                {
                    UnitRA.UpdatePriorityStrategy(model.priority_strategy, "U_" + unit_id);
                });
                AccountGroupRA.Delete4AccountGroup(model.id);
                List<Model.DB.AccountGroupItem> items = AccountGroupDA.ListItems4AccountGroup(model.id);
                foreach (Model.DB.AccountGroupItem item in items)
                {
                    OpenCloseBiz.LoadAccountGroupItem(item);
                }
                TradeBiz.CalculateValue();
            }
            return Result(result);
        }

        public Result Delete(Model.DB.AccountGroup model)
        {
            return Result(AccountGroupDA.Delete(model, user_id));
        }
    }
}
