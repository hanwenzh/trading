using AutoUpgrade.DB;
using AutoUpgrade.Model;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Windows.Forms;

namespace AutoUpgrade
{
    public partial class FrmMain : Form
    {
        List<ClientFileCompare> files_compary;

        public FrmMain()
        {
            InitializeComponent();

            Dictionary<string, string> dic = ConfigDA.List();
            txt_version_no_old.Text = dic["client_version_no"];
            txt_version_old.Text = dic["client_version"];
            txt_version_new.Text = DateTime.Now.ToString("yyyyMMdd") + "01";

            string dir = @"D:\SVN\Server\Trade\bin";
            List<ClientFile> files_old = ClientFileDA.List();
            List<ClientFile> files_new = new List<ClientFile>();
            GetDirectorFiles(dir, ref files_new);
            files_compary = files_old.Select(f => new ClientFileCompare()
            {
                name = f.name,
                size = f.size,
                time = f.time
            }).ToList();
            foreach (ClientFile fn in files_new)
            {
                fn.name = fn.name.Substring(dir.Length).Replace('\\', '/');

                ClientFileCompare fc = files_compary.Find(f => f.name == fn.name);
                if (fc == null)
                {
                    files_compary.Add(new ClientFileCompare()
                    {
                        name = fn.name,
                        size_new = fn.size,
                        time_new = fn.time
                    });
                }
                else
                {
                    fc.size_new = fn.size;
                    fc.time_new = fn.time;
                }
            }
            dgvFiles.DataSource = files_compary;
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            if(!string.IsNullOrEmpty(txt_version_new.Text) && !string.IsNullOrEmpty(txt_version_no_new.Text))
            {
                ConfigDA.Update(txt_version_new.Text, txt_version_no_new.Text);

                var list = files_compary.Where(f => f.time != f.time_new).ToList();
                ClientFileDA.Add(files_compary, txt_version_new.Text);
                MessageBox.Show("保存成功！共更新" + list.Count + "个文件。", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                Close();
            }
        }

        public static void GetDirectorFiles(string dir, ref List<ClientFile> list)
        {
            //绑定到指定的文件夹目录
            DirectoryInfo di = new DirectoryInfo(dir);
            //检索表示当前目录的文件和子目录
            FileSystemInfo[] fsinfos = di.GetFileSystemInfos();
            //遍历检索的文件和子目录
            foreach (FileSystemInfo fsinfo in fsinfos)
            {
                //判断是否为空文件夹　　
                if (fsinfo is DirectoryInfo)
                {
                    //递归调用
                    GetDirectorFiles(fsinfo.FullName, ref list);
                }
                else
                {
                    //将得到的文件全路径放入到集合中
                    list.Add(new ClientFile()
                    {
                        name = fsinfo.FullName,
                        size = (int)new FileInfo(fsinfo.FullName).Length,
                        time = fsinfo.LastWriteTime.ToString("yyyy/MM/dd HH:mm:ss")
                    });
                }
            }
        }

        private void dgvFiles_RowPostPaint(object sender, DataGridViewRowPostPaintEventArgs e)
        {
            //自动编号，与数据无关
            Rectangle rectangle = new Rectangle(e.RowBounds.Location.X,
               e.RowBounds.Location.Y,
               dgvFiles.RowHeadersWidth - 4,
               e.RowBounds.Height);
            TextRenderer.DrawText(e.Graphics,
                  (e.RowIndex + 1).ToString(),
                   dgvFiles.RowHeadersDefaultCellStyle.Font,
                   rectangle,
                   dgvFiles.RowHeadersDefaultCellStyle.ForeColor,
                   TextFormatFlags.VerticalCenter | TextFormatFlags.Right);
        }
    }
}